trigger:
  branches:
    include: [develop, qa, master]

pool: DTTPool

variables:
  EXPO_TOKEN: $(EXPO_TOKEN)  # Variável secreta configurada no Azure
  BUILD_ARTIFACT_NAME: 'SoloQuest-$(Build.BuildId).apk'

stages:
- stage: Build
  displayName: 'Build via EAS'
  jobs:
  - job: EAS_Build
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '22.x'
    
    - script: npm install -g eas-cli
      displayName: 'Instalar EAS CLI'
    
    - script: npm install
      displayName: 'Instalar Dependências'
    
    - script: eas login --token $(EXPO_TOKEN)
      displayName: 'Autenticar no EAS'
      env:
        EXPO_TOKEN: $(EXPO_TOKEN)
    
    - script: eas build --platform android --non-interactive --no-wait --local-build
      displayName: 'Gerar APK via EAS'
    
    - script: |
        # Instalar jq para Windows (pré-requisito nos agents)
        curl -L -o jq.exe https://github.com/stedolan/jq/releases/download/jq-1.6/jq-win64.exe
        mkdir C:\jq
        move jq.exe C:\jq
        setx PATH "%PATH%;C:\jq"
    
    - script: |
        BUILD_ID=$(eas build:list --platform android --status finished --json | jq -r '.[0].id')
        eas build:download %BUILD_ID% --output $(Pipeline.Workspace)/$(BUILD_ARTIFACT_NAME)
      displayName: 'Baixar APK Gerado'
    
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Pipeline.Workspace)/$(BUILD_ARTIFACT_NAME)'
        ArtifactName: 'SoloQuestBuild'
        publishLocation: 'Container'

- stage: Deploy_Develop
  displayName: 'Deploy para Develop'
  dependsOn: Build
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/develop')
  jobs:
  - job: Deploy_Develop
    steps:
    - download: current
      artifact: SoloQuestBuild
    
    - script: |
        mkdir "C:\Deploy\SoloQuest\Develop" 2>nul || echo "Pasta já existe"
        xcopy /Y "$(Pipeline.Workspace)\SoloQuestBuild\$(BUILD_ARTIFACT_NAME)" "C:\Deploy\SoloQuest\Develop"
      displayName: 'Instalar em Develop'

- stage: Deploy_QA
  displayName: 'Deploy para QA'
  dependsOn: Build
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/qa')
  jobs:
  - job: Deploy_QA
    steps:
    - download: current
      artifact: SoloQuestBuild
    
    - script: |
        mkdir "C:\Deploy\SoloQuest\QA" 2>nul || echo "Pasta já existe"
        xcopy /Y "$(Pipeline.Workspace)\SoloQuestBuild\$(BUILD_ARTIFACT_NAME)" "C:\Deploy\SoloQuest\QA"
      displayName: 'Instalar em QA'

- stage: Deploy_Prod
  displayName: 'Deploy para Prod'
  dependsOn: Build
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
  jobs:
  - deployment: Deploy_Prod
    environment: Production
    strategy:
      rolling:
        maxParallel: 2
        deploy:
          steps:
          - download: current
            artifact: SoloQuestBuild
          
          - script: |
              mkdir "C:\Deploy\SoloQuest\Production" 2>nul || echo "Pasta já existe"
              xcopy /Y "$(Pipeline.Workspace)\SoloQuestBuild\$(BUILD_ARTIFACT_NAME)" "C:\Deploy\SoloQuest\Production"
            displayName: 'Instalar em Prod'